DROP TABLE IF EXISTS USERS, FRIENDSHIP, FILMS, FILM, GENRES, MPA, FILM_LIKES, FILM_GENRES, FILM_MPA CASCADE;

CREATE TABLE IF NOT EXISTS USERS
(
    user_id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email varchar(255) UNIQUE,
    login varchar(255) UNIQUE,
    name varchar(255),
    birthday DATE
);

CREATE TABLE IF NOT EXISTS MPA
(
    mpa_id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    mpa_name varchar(255)
);

CREATE TABLE IF NOT EXISTS GENRES
(
    genre_id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name varchar(255)
);

CREATE TABLE IF NOT EXISTS FILMS
(
    film_id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name varchar(255),
    description varchar(255),
    releaseDate DATE,
    duration integer,
    mpa_id integer REFERENCES MPA (mpa_id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS FILM_LIKES
(
    film_id integer REFERENCES FILMS (film_id),
    user_id integer REFERENCES USERS (user_id)
);

CREATE TABLE IF NOT EXISTS FILM_MPA
(
    film_id integer REFERENCES FILMS (film_id),
    mpa_id integer REFERENCES MPA (mpa_id)
);

CREATE TABLE IF NOT EXISTS FILM_GENRES
(
    film_id integer REFERENCES FILMS (film_id),
    genre_id integer REFERENCES GENRES (genre_id)
);

CREATE TABLE IF NOT EXISTS FRIENDSHIP
(
    user_id integer REFERENCES USERS (user_id),
    friend_id integer REFERENCES USERS (user_id),
    friends boolean
);

CREATE TABLE IF NOT EXISTS EVENT_FEED
(
    event_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    event_timestamp TIMESTAMP NOT NULL,
    user_id INTEGER REFERENCES users (user_id) ON DELETE CASCADE,
    event_type VARCHAR(255) NOT NULL,
    operation VARCHAR(255) NOT NULL,
    entity_id INTEGER NOT NULL
);

